name: Deploy Staging

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ROLE_TO_ASSUME: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/staging-github-oidc
  FE_REPO: ${{ vars.ECR_REPO_FE }}
  BE_REPO: ${{ vars.ECR_REPO_BE }}
  FE_IMAGE: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPO_FE }}
  FE_NGINX_IMAGE: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPO_FE }}-nginx
  BE_IMAGE: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPO_BE }}
  TF_VAR_gh_owner: ${{ vars.GH_OWNER }}
  TF_VAR_gh_repo:  ${{ vars.GH_REPO }}

jobs:
  deploy:
    environment: staging
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Debug context
        run: |
          echo "GITHUB_REPOSITORY=$GITHUB_REPOSITORY"
          echo "GITHUB_REF=$GITHUB_REF"
          echo "GITHUB_EVENT_NAME=$GITHUB_EVENT_NAME"
          echo "ROLE_TO_ASSUME=${{ env.ROLE_TO_ASSUME }}"
          echo "Has OIDC URL? ${ACTIONS_ID_TOKEN_REQUEST_URL:+yes}"
          echo "Has OIDC token var? ${ACTIONS_ID_TOKEN_REQUEST_TOKEN:+yes}"

      - name: Sanitize any pre-set AWS creds
        shell: bash
        run: |
          unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_PROFILE AWS_DEFAULT_PROFILE

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Assert OIDC creds are active
        shell: bash
        run: |
          set -euo pipefail
          aws sts get-caller-identity

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform Init
        working-directory: ./infrastructure
        run: terraform init -input=false

      - name: Import IAM role if it already exists
        working-directory: ./infrastructure
        shell: bash
        run: |
          set -euo pipefail
          ROLE_NAME="staging-github-oidc"
          if aws iam get-role --role-name "$ROLE_NAME" >/dev/null 2>&1; then
            echo "Found existing role: $ROLE_NAME. Importing into Terraform state if needed..."
            if ! terraform state show aws_iam_role.github_actions_oidc >/dev/null 2>&1; then
              terraform import aws_iam_role.github_actions_oidc "$ROLE_NAME"
            else
              echo "Role already imported in state."
            fi
          else
            echo "Role does not exist. Terraform will create it."
          fi

      - name: Terraform Apply (create/update infra)
        working-directory: ./infrastructure
        run: terraform apply -auto-approve -input=false

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repositories exist
        shell: bash
        run: |
          set -euo pipefail
          for r in "${FE_REPO}" "${BE_REPO}" "${FE_REPO}-nginx"; do
            aws ecr describe-repositories --repository-names "$r" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "$r" >/dev/null
          done

      - name: Build & Push Frontend
        working-directory: ./frontend
        run: |
          docker build -t "$FE_IMAGE:latest" .
          docker push "$FE_IMAGE:latest"

      - name: Build & Push Frontend Nginx Auth Sidecar
        working-directory: ./frontend
        run: |
          docker build -t "$FE_NGINX_IMAGE:latest" -f Dockerfile.nginx .
          docker push "$FE_NGINX_IMAGE:latest"

      - name: Build & Push Backend
        working-directory: ./backend
        run: |
          docker build -t "$BE_IMAGE:latest" .
          docker push "$BE_IMAGE:latest"

      - name: Terraform Apply (roll services to latest)
        working-directory: ./infrastructure
        run: terraform apply -auto-approve -input=false