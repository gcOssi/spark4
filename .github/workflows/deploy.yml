name: Deploy Staging

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ROLE_TO_ASSUME: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/staging-github-oidc

  FE_REPO: ${{ vars.ECR_REPO_FE }}
  BE_REPO: ${{ vars.ECR_REPO_BE }}
  FE_IMAGE: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPO_FE }}
  FE_NGINX_IMAGE: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPO_FE }}-nginx
  BE_IMAGE: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPO_BE }}

  # Backend remoto (mismo bucket; keys separados por stack)
  TF_BACKEND_BUCKET: ${{ secrets.AWS_ACCOUNT_ID }}-${{ vars.GH_REPO }}-staging
  TF_BACKEND_DDB_TABLE: tf-locks-${{ vars.GH_REPO }}-staging
  TF_BACKEND_KEY_BOOTSTRAP: ${{ vars.GH_REPO }}/staging/bootstrap.tfstate
  TF_BACKEND_KEY_RUNTIME:   ${{ vars.GH_REPO }}/staging/runtime.tfstate

  # Vars Terraform comunes
  TF_VAR_region: ${{ vars.AWS_REGION }}
  TF_VAR_name_prefix: staging
  TF_VAR_gh_owner: ${{ vars.GH_OWNER }}
  TF_VAR_gh_repo:  ${{ vars.GH_REPO }}
  TF_VAR_tf_backend_bucket: ${{ vars.TF_BACKEND_BUCKET }}
  TF_VAR_tf_backend_ddb_table: ${{ vars.TF_BACKEND_DDB_TABLE }}

jobs:
  deploy:
    environment: staging
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Sanitize any pre-set AWS creds
        shell: bash
        run: |
          unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_PROFILE AWS_DEFAULT_PROFILE

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com
          role-duration-seconds: 7200

      - name: Ensure S3 bucket and DynamoDB table for tfstate
        shell: bash
        run: |
          set -euo pipefail
          echo "Bucket: $TF_BACKEND_BUCKET"
          echo "DDB   : $TF_BACKEND_DDB_TABLE"
          if aws s3api head-bucket --bucket "$TF_BACKEND_BUCKET" 2>/dev/null; then
            echo "Bucket exists"
          else
            if [ "$AWS_REGION" = "us-east-1" ]; then
              aws s3api create-bucket --bucket "$TF_BACKEND_BUCKET"
            else
              aws s3api create-bucket --bucket "$TF_BACKEND_BUCKET" \
                --region "$AWS_REGION" \
                --create-bucket-configuration LocationConstraint="$AWS_REGION"
            fi
          fi
          aws s3api put-bucket-versioning --bucket "$TF_BACKEND_BUCKET" --versioning-configuration Status=Enabled
          aws s3api put-bucket-encryption --bucket "$TF_BACKEND_BUCKET" \
            --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'
          aws dynamodb describe-table --table-name "$TF_BACKEND_DDB_TABLE" >/dev/null 2>&1 || \
            aws dynamodb create-table \
              --table-name "$TF_BACKEND_DDB_TABLE" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      ##############################
      # Bootstrap (OIDC + tfstate)
      ##############################
      - name: Terraform Init (bootstrap)
        working-directory: ./infrastructure/bootstrap
        shell: bash
        run: |
          set -euo pipefail
          if aws s3api head-object --bucket "${TF_BACKEND_BUCKET}" --key "${TF_BACKEND_KEY_BOOTSTRAP}" >/dev/null 2>&1; then
            INIT_FLAGS="-reconfigure"
          elif [ -f "terraform.tfstate" ]; then
            INIT_FLAGS="-migrate-state"
          else
            INIT_FLAGS=""
          fi
          terraform init -input=false ${INIT_FLAGS} \
            -backend-config="bucket=${TF_BACKEND_BUCKET}" \
            -backend-config="key=${TF_BACKEND_KEY_BOOTSTRAP}" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_BACKEND_DDB_TABLE}" \
            -backend-config="encrypt=true"

      - name: Import OIDC role/policies if already exist (idempotent)
        working-directory: ./infrastructure/bootstrap
        shell: bash
        run: |
          set -euo pipefail
          ROLE_NAME="staging-github-oidc"
          POL_DEPLOY="staging-github-deploy"
          POL_TFSTATE="staging-tfstate-access"

          # Importa rol si existe en AWS
          if aws iam get-role --role-name "$ROLE_NAME" >/dev/null 2>&1; then
            terraform import aws_iam_role.github_actions_oidc "$ROLE_NAME" || true
          fi

          # Importa policies si estÃ¡n adjuntas
          if aws iam list-role-policies --role-name "$ROLE_NAME" | grep -q "$POL_DEPLOY"; then
            terraform import aws_iam_role_policy.github_permissions "$ROLE_NAME:$POL_DEPLOY" || true
          fi
          if aws iam list-role-policies --role-name "$ROLE_NAME" | grep -q "$POL_TFSTATE"; then
            terraform import aws_iam_role_policy.tf_backend_access "$ROLE_NAME:$POL_TFSTATE" || true
          fi

      - name: Terraform Apply (bootstrap)
        working-directory: ./infrastructure/bootstrap
        run: terraform apply -auto-approve -input=false

      ##############################
      # Runtime
      ##############################
      - name: Terraform Init (runtime)
        working-directory: ./infrastructure/runtime
        shell: bash
        run: |
          set -euo pipefail
          if aws s3api head-object --bucket "${TF_BACKEND_BUCKET}" --key "${TF_BACKEND_KEY_RUNTIME}" >/dev/null 2>&1; then
            INIT_FLAGS="-reconfigure"
          elif [ -f "terraform.tfstate" ]; then
            INIT_FLAGS="-migrate-state"
          else
            INIT_FLAGS=""
          fi
          terraform init -input=false ${INIT_FLAGS} \
            -backend-config="bucket=${TF_BACKEND_BUCKET}" \
            -backend-config="key=${TF_BACKEND_KEY_RUNTIME}" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_BACKEND_DDB_TABLE}" \
            -backend-config="encrypt=true"

      - name: Terraform Apply (runtime)
        working-directory: ./infrastructure/runtime
        run: terraform apply -auto-approve -input=false

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repositories exist
        shell: bash
        run: |
          set -euo pipefail
          for r in "${FE_REPO}" "${BE_REPO}" "${FE_REPO}-nginx"; do
            aws ecr describe-repositories --repository-names "$r" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "$r" >/dev/null
          done

      - name: Build & Push Frontend
        working-directory: ./frontend
        run: |
          docker build -t "$FE_IMAGE:latest" .
          docker push "$FE_IMAGE:latest"

      - name: Build & Push Frontend Nginx Auth Sidecar
        working-directory: ./frontend
        run: |
          docker build -t "$FE_NGINX_IMAGE:latest" -f Dockerfile.nginx .
          docker push "$FE_NGINX_IMAGE:latest"

      - name: Build & Push Backend
        working-directory: ./backend
        run: |
          docker build -t "$BE_IMAGE:latest" .
          docker push "$BE_IMAGE:latest"

      - name: Terraform Apply (runtime roll latest)
        working-directory: ./infrastructure/runtime
        run: terraform apply -auto-approve -input=false
