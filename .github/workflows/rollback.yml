name: Rollback Staging

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ROLE_TO_ASSUME: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/staging-github-oidc

  TF_BACKEND_BUCKET: ${{ secrets.AWS_ACCOUNT_ID }}-${{ vars.GH_REPO }}-staging
  TF_BACKEND_KEY: ${{ vars.GH_REPO }}/staging/terraform.tfstate 
  TF_BACKEND_DDB_TABLE: tf-locks-${{ vars.GH_REPO }}-staging

  TF_VAR_gh_owner: ${{ vars.GH_OWNER }}
  TF_VAR_gh_repo:  ${{ vars.GH_REPO }}
  TF_VAR_name_prefix: staging
  TF_VAR_tf_backend_bucket: ${{ vars.TF_BACKEND_BUCKET }}
  TF_VAR_tf_backend_ddb_table: ${{ vars.TF_BACKEND_DDB_TABLE }}

jobs:
  destroy:
    environment: staging
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Check backend access
        run: |
          set -euo pipefail
          echo "Testing S3 and DynamoDB access..."
          aws s3 ls "s3://${TF_BACKEND_BUCKET}" || true
          aws dynamodb describe-table --table-name "${TF_BACKEND_DDB_TABLE}" >/dev/null

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform Init (S3 backend, migrate state if local exists)
        working-directory: ./infrastructure
        run: |
          terraform init -input=false -reconfigure -migrate-state \
            -backend-config="bucket=${TF_BACKEND_BUCKET}" \
            -backend-config="key=${TF_BACKEND_KEY}" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_BACKEND_DDB_TABLE}" \
            -backend-config="encrypt=true"

      - name: Show state (debug)
        working-directory: ./infrastructure
        run: terraform state list || true

      - name: Destroy
        working-directory: ./infrastructure
        run: terraform destroy -auto-approve -input=false
